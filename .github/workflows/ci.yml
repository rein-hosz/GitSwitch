name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Setup SSH agent
        if: runner.os != '' # Always true, effectively runs on all OS
        shell: bash
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Add Git's usr/bin to PATH for ssh-add if on Windows
            # This is where ssh-add.exe is typically found with Git Bash
            echo "C:\\Program Files\\Git\\usr\\bin" >> $GITHUB_PATH
            echo "Git SSH tools path added to GITHUB_PATH for Windows"
          fi
          # Test command: succeed if agent is running (exit 0 or 1), fail on other errors (e.g., exit 2)
          ssh-add -l || (exit_code=$?; if [ $exit_code -ne 1 ]; then exit $exit_code; fi)
          echo "SSH Agent setup complete. Agent PID: $SSH_AGENT_PID, Auth Sock: $SSH_AUTH_SOCK"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run comprehensive platform tests
        run: cargo test --test comprehensive_platform_tests -- --nocapture
