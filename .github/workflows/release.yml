name: Release Multi-Platform Packages

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v0.1.0, v1.0.0, etc.
  workflow_dispatch: # Allows manual triggering

jobs:
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      version_no_v: ${{ steps.get_version.outputs.VERSION_NO_V }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION_TAG=$(git describe --tags --abbrev=0)
          echo "VERSION=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "VERSION_NO_V=${VERSION_TAG#v}" >> $GITHUB_OUTPUT
          echo "Linux: Building version: $VERSION_TAG"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
          cargo install cargo-deb cargo-generate-rpm

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-release-

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Build all Linux packages
        run: ./build.sh --all --version ${{ steps.get_version.outputs.VERSION }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages-${{ steps.get_version.outputs.VERSION }}
          path: |
            target/git-switch-${{ steps.get_version.outputs.VERSION_NO_V }}.tar.gz
            target/debian/git-switch_${{ steps.get_version.outputs.VERSION_NO_V }}-*amd64.deb
            target/rpm/git-switch-${{ steps.get_version.outputs.VERSION_NO_V }}-*.x86_64.rpm
          if-no-files-found: error

  build-windows:
    name: Build Windows Package
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        shell: pwsh
        run: |
          $VERSION_TAG = git describe --tags --abbrev=0
          Add-Content -Path $env:GITHUB_OUTPUT -Value "VERSION=$VERSION_TAG"
          Write-Host "Windows: Building version: $VERSION_TAG"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.cargo\bin
            C:\Users\runneradmin\.cargo\registry\index
            C:\Users\runneradmin\.cargo\registry\cache
            C:\Users\runneradmin\.cargo\git\db
            target
          key: windows-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-cargo-release-

      - name: Build Windows package
        shell: pwsh
        run: |
          Write-Host "Running build-windows.ps1 -BuildVersion ${{ steps.get_version.outputs.VERSION }}"
          .\build-windows.ps1 -BuildVersion ${{ steps.get_version.outputs.VERSION }}

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package-${{ steps.get_version.outputs.VERSION }}
          path: target/release/git-switch-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip
          if-no-files-found: error

  build-macos:
    name: Build macOS Packages
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION_TAG=$(git describe --tags --abbrev=0)
          echo "VERSION=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "macOS: Building version: $VERSION_TAG"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: macos-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-cargo-release-

      - name: Install create-dmg (optional)
        run: brew install create-dmg

      - name: Make build script executable
        run: chmod +x build-macos.sh

      - name: Build all macOS packages
        run: ./build-macos.sh --all --version ${{ steps.get_version.outputs.VERSION }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages-${{ steps.get_version.outputs.VERSION }}
          path: |
            target/packages/git-switch-*-macos-amd64.tar.gz
            target/packages/git-switch-*-macos-amd64.dmg
            target/packages/git-switch-*-macos-amd64.pkg
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: List downloaded files (for debugging)
        run: |
          echo "Listing dist/ contents:"
          find dist/ -type f -ls

      - name: Prepare release assets
        id: prep_assets
        run: |
          VERSION_TAG="${{ needs.build-linux.outputs.version }}"
          mkdir -p release_assets

          # Copy Linux packages
          find dist/linux-packages-${VERSION_TAG}/ -name "*.tar.gz" -exec cp {} release_assets/ \;
          find dist/linux-packages-${VERSION_TAG}/ -name "*.deb" -exec cp {} release_assets/ \;
          find dist/linux-packages-${VERSION_TAG}/ -name "*.rpm" -exec cp {} release_assets/ \;

          # Copy Windows package
          find dist/windows-package-${VERSION_TAG}/ -name "*.zip" -exec cp {} release_assets/ \;

          # Copy macOS packages
          find dist/macos-packages-${VERSION_TAG}/ -name "*.tar.gz" -exec cp {} release_assets/ \;
          find dist/macos-packages-${VERSION_TAG}/ -name "*.dmg" -exec cp {} release_assets/ \;
          find dist/macos-packages-${VERSION_TAG}/ -name "*.pkg" -exec cp {} release_assets/ \;

          echo "Prepared assets:"
          ls -la release_assets/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.build-linux.outputs.version }}"
          echo "## GitSwitch $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Cross-platform Git account and SSH key management tool." >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if git describe --tags --abbrev=0 HEAD~1 &> /dev/null; then
            echo "### Changes in this release:" >> CHANGELOG.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> CHANGELOG.md
          else
            echo "### Features:" >> CHANGELOG.md
            echo "- Complete Git account and SSH key management" >> CHANGELOG.md
            echo "- Cross-platform support (Linux, Windows, macOS)" >> CHANGELOG.md
            echo "- Automated SSH key generation and configuration" >> CHANGELOG.md
            echo "- Multiple package formats for easy installation" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "### Package Downloads:" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "#### Linux:" >> CHANGELOG.md
          echo "- **DEB Package**: For Debian/Ubuntu systems" >> CHANGELOG.md
          echo "- **RPM Package**: For Red Hat/Fedora/SUSE systems" >> CHANGELOG.md
          echo "- **TAR.GZ Archive**: For manual installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "#### Windows:" >> CHANGELOG.md
          echo "- **ZIP Package**: Includes executable and PowerShell installer" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "#### macOS:" >> CHANGELOG.md
          echo "- **DMG Image**: Drag-and-drop installation" >> CHANGELOG.md
          echo "- **PKG Installer**: Native macOS installer" >> CHANGELOG.md
          echo "- **TAR.GZ Archive**: For manual installation" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-linux.outputs.version }}
          name: GitSwitch ${{ needs.build-linux.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
