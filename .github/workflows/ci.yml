name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Setup SSH agent (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

      - name: Setup SSH agent (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Ensure OpenSSH Client is installed
          $capability = Get-WindowsCapability -Online | Where-Object Name -like "OpenSSH.Client*"
          if ($capability.State -eq "NotPresent") {
            Write-Host "OpenSSH Client not found, installing..."
            Add-WindowsCapability -Online -Name $capability.Name -ErrorAction Stop
            Write-Host "OpenSSH Client installed."
          } else {
            Write-Host "OpenSSH Client is already installed."
          }

          # Start ssh-agent service if not running
          $sshAgentService = Get-Service ssh-agent -ErrorAction SilentlyContinue
          if ($sshAgentService.Status -ne 'Running') {
            Write-Host "SSH agent service is not running. Starting..."
            Set-Service ssh-agent -StartupType Manual -ErrorAction SilentlyContinue
            Start-Service ssh-agent -ErrorAction Stop
            Write-Host "SSH agent service started."
          } else {
            Write-Host "SSH agent service is already running."
          }

          # Wait for the agent to be ready
          Start-Sleep -Seconds 5 # Increased sleep duration

          # Set SSH_AUTH_SOCK environment variable
          $SshAuthSockValue = "\\\\.\\pipe\\openssh-ssh-agent"
          $env:SSH_AUTH_SOCK = $SshAuthSockValue  # Set for current script session
          echo "SSH_AUTH_SOCK=$SshAuthSockValue" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append # Set for subsequent steps
          Write-Host "SSH_AUTH_SOCK set to: $env:SSH_AUTH_SOCK (for current script and subsequent steps)"

          # Add Git\\'s SSH tools to PATH to ensure ssh-add is the one from Git
          $gitSshPath = "C:\\Program Files\\Git\\usr\\bin"
          if (Test-Path $gitSshPath) {
            $env:PATH = "$gitSshPath;" + $env:PATH
            echo "Added Git SSH tools to PATH: $gitSshPath"
            echo "$gitSshPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            Write-Warning "Git SSH tools path not found: $gitSshPath"
          }

          # Test ssh-add -l. It should return exit code 0 if agent is running and has no keys,
          # or exit code 1 if agent is running but has keys.
          # Any other exit code indicates a problem.
          try {
            Write-Host "Testing ssh-agent connectivity with ssh-add -l..."
            $result = ssh-add -l 2>&1
            $exitCode = $LASTEXITCODE
            Write-Host "ssh-add -l exited with code: $exitCode"
            Write-Host "ssh-add -l output: $result"
            if ($exitCode -ne 0 -and $exitCode -ne 1) {
              Write-Error "SSH agent is not responding correctly. Exit code: $exitCode. Output: $result"
              # Attempt to get more diagnostic info
              Get-Service ssh-agent | Select-Object -Property *
              exit 1
            } else {
              Write-Host "SSH agent is responding correctly."
            }
          } catch {
            Write-Error "Failed to test ssh-agent: $($_.Exception.Message)"
            Get-Service ssh-agent | Select-Object -Property *
            exit 1
          }
          Write-Host "Windows SSH agent setup complete."

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run comprehensive platform tests
        run: cargo test --test comprehensive_platform_tests -- --nocapture
